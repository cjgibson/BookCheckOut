package uncc.tables;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.lang.reflect.ParameterizedType;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashMap;

import org.hsqldb.*;

import uncc.HSQLDatabaseConnection;
import uncc.objects.HSQLDatabaseObject;

abstract class HSQLDatabaseTable<E extends HSQLDatabaseObject> {
    private Type type = ((ParameterizedType) this.getClass()
                                                 .getGenericSuperclass())
                                                 .getActualTypeArguments()[0];
    private final String tbname = ((Class) type).getSimpleName();
    static HSQLDatabaseConnection hsqldb;
    static Connection dbconn;
    static HSQLDatabaseTable instance;
    private PreparedStatement stmtGetLastID, stmtCreate, stmtInsert, stmtUpdate,
        stmtDelete, stmtGetByID, stmtIterAll;
    private String strCreate, strInsert, strUpdate, strDelete, strGetByID, strIterAll;
    private static final HashMap<Type, String> TYPEMAP = new HashMap<>();
    static {
        TYPEMAP.put(boolean.class, "BOOLEAN");
        TYPEMAP.put(byte.class, "INTEGER");
        TYPEMAP.put(char.class, "CHAR(1)");
        TYPEMAP.put(double.class, "DOUBLE");
        TYPEMAP.put(float.class, "DOUBLE");
        TYPEMAP.put(int.class, "INTEGER");
        TYPEMAP.put(long.class, "INTEGER");
        TYPEMAP.put(short.class, "INTEGER");
                
        TYPEMAP.put(Boolean.class, "BOOLEAN");
        TYPEMAP.put(Byte.class, "INTEGER");
        TYPEMAP.put(Double.class, "DOUBLE");
        TYPEMAP.put(Float.class, "DOUBLE");
        TYPEMAP.put(Integer.class, "INTEGER");
        TYPEMAP.put(Long.class, "INTEGER");
        TYPEMAP.put(String.class, "VARCHAR(1024)");
    }
    
    HSQLDatabaseTable(HSQLDatabaseConnection hsqldb) throws SQLException {
        identifyFields();
        HSQLDatabaseTable.hsqldb = hsqldb;
        HSQLDatabaseTable.dbconn = hsqldb.getConnection();
        initializeStatements();
        instance = this;
    }
    
    private void initializeStatements() throws SQLException {
        try {
            this.stmtGetLastID = coerce("call identity()");
            if (getRowCount() == -1) {
                update(this.strCreate);
            }
        } catch (SQLException e) {
            throw e;
        }
    }
    
    private PreparedStatement coerce(String str) throws SQLException {
        try {
            return dbconn.prepareStatement(str);
        } catch (SQLException e) {
            System.err.println("Failed to coerce String into PreparedStatement"
                    + " with error " + e.getErrorCode() + ":\n  " + e + "\n");
            throw e;
        }
    }
    
    private int getRowCount() {
        ResultSet res = execute("SELECT COUNT(*) FROM " + this.tbname + ";");
        if (res == null)
            return -1;
        try {
            res.next();
            int rc = res.getInt(1);
            res.close();
            return rc;
        } catch (SQLException e) {
            throw new IllegalStateException();
        }
    }
    
    protected int update(String str) {
        try {
            PreparedStatement stmt = coerce(str);
            int status = stmt.executeUpdate();
            return status;
        } catch (SQLException e) {
            System.err.println("Failed to update SQL String with error: " 
                    + e.getErrorCode() + ": " + e + "\n" + str + "\n");
            return -1;
        }
    }
    
    protected ResultSet execute(String str) {
        try {
            PreparedStatement stmt = coerce(str);
            ResultSet res = stmt.executeQuery();
            return res;
        } catch (SQLException e) {
            System.err.println("Failed to execute SQL String with error "
                    + e.getErrorCode() + ": " + e + "\n" + str + "\n");
            return null;
        }
    }
    
    private void identifyFields() {
        Field[] fields = ((Class<E>) type).getDeclaredFields();
        int numOfFields = fields.length;
        for (int i = 0 ; i < fields.length ; i++) {
            if (Modifier.isPrivate(fields[i].getModifiers())) {
                if (Modifier.isFinal(fields[i].getModifiers()) ||
                        Modifier.isTransient(fields[i].getModifiers())) {
                    fields[i] = null;
                    numOfFields--;
                }
            }
        }
        
        this.strCreate = ""
                + "CREATE CACHED TABLE " + this.tbname
                + " (\n  Obj OBJECT NOT NULL,"
                + "\n  ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL";
        this.strInsert = ""
                + "INSERT INTO " + this.tbname
                + " (Obj, ID";
        this.strUpdate = ""
                + "UPDATE " + this.tbname + " SET"
                + "\n  Obj = ?";
        
        for (Field field : fields) {
            if (field != null) {
                if (TYPEMAP.containsKey(field.getType())) {
                    this.strCreate += ",\n  " + field.getName() + " " 
                            + TYPEMAP.get(field.getType());
                    this.strInsert += ", " + field.getName();
                    this.strUpdate += ",\n  " + field.getName() + " = ?";
                } else {
                    this.strCreate += ",\n  " + field.getName() + " OBJECT";
                    this.strInsert += ", " + field.getName();
                    this.strUpdate += ",\n  " + field.getName() + " = ?";
                }
            }
        }
        
        this.strCreate += ",\n  PRIMARY KEY (ID)\n);";
        this.strInsert += ")\n  VALUES (?, ?";
        for (int i = 0; i < numOfFields; i++) {
            this.strInsert += ", ?";
        }
        this.strInsert += ");";
        this.strUpdate += "\n  WHERE ID = ?;";
        
        this.strDelete = ""
                + "DELETE FROM " + this.tbname
                + "\n  WHERE ID = ?;";
        this.strGetByID = ""
                + "SELECT Obj\n  FROM " + this.tbname
                + "\n  WHERE ID = ?;";
        this.strIterAll = ""
                + "SELECT Obj, ID\n  FROM " + this.tbname
                + "\n  ORDER BY ID;";
        
        //System.out.println(this.strCreate);
        //System.out.println(this.strInsert);
        //System.out.println(this.strUpdate);
        //System.out.println(this.strDelete);
        //System.out.println(this.strGetByID);
        //System.out.println(this.strIterAll);
    }
}
