package uncc.objects;

import java.io.CharConversionException;
import java.util.InputMismatchException;

/**
 * ISBN object used to store ISBN-10 and ISBN-13 representations of a
 *   uncc.objects.Book object's ISBN.
 * 
 * @author  Christian Gibson
 * @version 0.1
 * @date    June 17th, 2015
 * @isodate 2015-06-17T20:00:00-04:00
 */

public class ISBN extends HSQLDatabaseObject {
    /**
     * The serialVersionID required by java.io.Serializable.
     */
    private static final long serialVersionUID = -1714760310448862343L;
    
    /**
     * Final fields used by the ISBN object:
     *   final String[] LEGAL_ISBN13_PREFIX: List of prefixes allowed by the
     *     current ISBN-13 standard ("978" and "979" at time of writing).
     * 
     * Other fields:
     *   String isbn: The original ISBN string passed to the constructor.
     *   String isbn10: The ISBN-10 string generated by the constructor.
     *   String isbn13: The ISBN-13 string generated by the constructor.
     */
    private String isbn, isbn10, isbn13;
    private static final String[] LEGAL_ISBN13_PREFIX = {
        "978", "979"
    };
    
    /**
     * Constructor for the ISBN object.
     * 
     * @param isbn A string representation of either an ISBN-10 or ISBN-13
     *          value. Non-isbn characters (anything except 0-9 and 'X') are
     *          removed prior to processing. If the cleaned string is neither
     *          10 nor 13 characters long, or the calculated checksum does not
     *          match the checksum included in the value, the constructor
     *          will throw an IllegalArguementException.
     */
    public ISBN(String isbn) {
        this.isbn = interpretISBN(cleanISBN(isbn));
    }
    
    /**
     * Constructor for the ISBN object.
     * 
     * @param isbn10 A string representation of an ISBN-10 value. All non-isbn-10
     *          characters (anything except 0-9 and 'X') are removed prior to
     *          processing. If the cleaned string is not 10 characters long, or
     *          the calculated checksum does not match the checksum included in
     *          the provided string, the constructor will throw an
     *          IllegalArguementException.
     * @param isbn13 A string representation of an ISBN-13 value. All non-isbn-13
     *          characters (anything except 0-9) are removed prior to processing.
     *          If the cleaned string is not 13 characters long, or the calculated
     *          checksum does not match the checksum included in the provided
     *          string, the constructor will throw an IllegalArguementException.
     * @throws InputMismatchException In the case that the provided isbn10 and
     *          isbn13 values, although valid in of themselves, are not
     *          representations of the same ISBN.
     */
    public ISBN(String isbn10, String isbn13) {
        this.isbn10 = interpretISBN10(cleanISBN(isbn10));
        this.isbn13 = interpretISBN13(cleanISBN(isbn13));
        if (this.isbn10 != null && match(this.isbn10, this.isbn13)) {
            this.isbn = this.isbn13;
        } else {
            throw new InputMismatchException();
        }
    }
    
    /**
     * Constructor for the ISBN object.
     * 
     * @param isbn An integer representation of an isbn value. Coerced as a
     *          string and processed with ISBN(String isbn).
     */
    public ISBN(int isbn) {
        this("" + isbn);
    }
    
    /**
     * Constructor for the ISBN object.
     * 
     * @param isbn10 An integer representation of an isbn10 value. Coerced as a 
     *          string and processed with ISBN(String isbn10, String isbn13).
     * @param isbn13 An integer representation of an isbn13 value. Coerced as a 
     *          string and processed with ISBN(String isbn10, String isbn13).
     */
    public ISBN(int isbn10, int isbn13) {
        this("" + isbn10, "" + isbn13);
    }
    
    /**
     * @return The ISBN-13 value stored by this object.
     */
    public String getISBN13() {
        return this.isbn13;
    }
    
    /**
     * @return The ISBN-10 value stored by this object, if one exists, else null.
     */
    public String getISBN10() {
        return this.isbn10;
    }
    
    /**
     * @return The ISBN used to initialize this object.
     */
    public String getOriginalISBN() {
        return this.isbn;
    }
    
    /**
     * Method that strips non-legal characters from a string.
     * 
     * @param isbn The ISBN string to clean.
     * @return The cleaned ISBN string.
     */
    public static String cleanISBN(String isbn) {
        StringBuilder numeric = new StringBuilder();
        
        for (char part : isbn.toCharArray()) {
            if (Character.isDigit(part) || part == 'X' || part == 'x')
                numeric.append(part);
        }
        
        return numeric.toString();
    }
    
    /**
     * Method that validates an ISBN.
     * 
     * @param isbn The ISBN to validate.
     * @return True if the ISBN is either a valid ISBN-13 or ISBN-10 value,
     *          False otherwise.
     */
    public static boolean validateISBN(String isbn) {
        if (isbn.length() == 10) {
            return validateISBN10(isbn);
        } else if (isbn.length() == 13) {
            return validateISBN13(isbn);
        }
        return false;
    }
    
    /**
     * Method that interprets an ISBN.
     * 
     * @param isbn A string representation of an ISBN.
     * @return The interpreted ISBN-13 or ISBN-10 string.
     * @throws IllegalArgumentException If the provided ISBN string is not
     *          10 or 13 characters long after it has been cleaned.
     */
    private String interpretISBN(String isbn) {
        if (isbn.length() == 10) {
            this.isbn10 = interpretISBN10(isbn);
            this.isbn13 = convertISBN10(this.isbn10);
            return this.isbn10;
        } else if (isbn.length() == 13) {
            this.isbn13 = interpretISBN13(isbn);
            this.isbn10 = convertISBN13(this.isbn13);
            return this.isbn13;
        } else {
            throw new IllegalArgumentException();
        }
    }
    
    /**
     * @param isbn A string representation of an ISBN-10 value.
     * @return The cleaned representation of the ISBN-10 value.
     * @throws IllegalArgumentException If the ISBN-10 value is invalid.
     */
    private String interpretISBN10(String isbn) {
        if (validateISBN10(isbn)) {
            this.isbn10 = isbn;
            this.isbn13 = convertISBN10(this.isbn10);
        } else {
            throw new IllegalArgumentException();
        }
        return this.isbn10;
    }
    
    /**
     * @param isbn A string representation of an ISBN-10 value.
     * @return The ISBN-13 representation of the ISBN-10 value.
     * @throws IllegalArgumentException If a CharConversionException is
     *          encountered in building the ISBN-13 string.
     */
    private String convertISBN10(String isbn) {
        isbn = "978" + isbn.substring(0, 9);
        try {
            isbn += calculateISBN13CheckSum(isbn);
        } catch (CharConversionException e) {
            throw new IllegalArgumentException();
        }
        return isbn;
    }
    
    /**
     * @param isbn A string representation of an ISBN-13 value.
     * @return The cleaned ISBN-13 string.
     * @throws IllegalArgumentException If the provided ISBN-13 value is invalid.
     */
    private String interpretISBN13(String isbn) {
        if (validateISBN13(isbn)) {
            this.isbn13 = isbn;
            this.isbn10 = convertISBN13(this.isbn13);
        } else {
            throw new IllegalArgumentException();
        }
        return this.isbn13;
    }
    
    /**
     * @param isbn A string representation of an ISBN-13 value.
     * @return An ISBN-10 representation of the ISBN-13 value, if one exists,
     *          otherwise, simply returns the provided ISBN-13 string.
     * @throws IllegalArgumentException If the provided ISBN-13 value is invalid
     *          or if a CharConversionException is encountered while building
     *          the ISBN-10 string.
     */
    private String convertISBN13(String isbn) {
        if (isbn.startsWith("978")) {
            isbn = isbn.substring(3, 12);
            try {
                int chck = calculateISBN10CheckSum(isbn);
                isbn += (chck == 10) ? 'X' : "" + chck;
            } catch (CharConversionException e) {
                throw new IllegalArgumentException();
            }
        } else {
            throw new IllegalArgumentException();
        }
        return isbn;
    }
    
    /**
     * Method that determines if an ISBN-10 and ISBN-13 value are equivalent.
     * 
     * @param isbn10 A string representation of an ISBN-10 value.
     * @param isbn13 A string representation of an ISBN-13 value.
     * @return True if isbn10 and isbn13 are equivalent representations of the
     *          same value, False otherwise.
     */
    private boolean match(String isbn10, String isbn13) {
        if (isbn13.startsWith("978")) {
            if (isbn10.substring(0, 9).equalsIgnoreCase(isbn13.substring(3, 12))) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * @param isbn A string representation of an ISBN-10 value.
     * @return True if isbn represents a legal ISBN-10 value, False otherwise.
     * @throws CharConversionException If the method fails to calculate the
     *          ISBN-10 value's correct checksum value.
     */
    public static boolean validateISBN10(String isbn) {
        char checkChar = isbn.charAt(isbn.length() - 1);
        int checkSum;
        
        try {
            if (Character.isDigit(checkChar)) {
                checkSum = Character.getNumericValue(checkChar);
            } else if (checkChar == 'X' || checkChar == 'x') {
                checkSum = 10;
            } else {
                return false;
            }
            
            if (calculateISBN10CheckSum(isbn) == checkSum) {
                return true;
            }
        } catch (CharConversionException e) {
            return false;
        }
        
        return false;
    }
    
    /**
     * @param isbn A string representation of an ISBN-10 value.
     * @return The checksum for the provided ISBN-10 as an integer ranging from
     *          0 to 10.
     * @throws CharConversionException If the method is unable to generate a
     *          numeric value for any digit found in the ISBN-10 string.
     */
    public static int calculateISBN10CheckSum(String isbn)
            throws CharConversionException {
        isbn = cleanISBN(isbn);
        if (isbn.length() > 9) {
            isbn = isbn.substring(0, 9);
        }
        int mult = 10;
        int chck = 0;
        for (char next : isbn.toCharArray()) {
            if (Character.isDigit(next)) {
                chck += mult * Character.getNumericValue(next);
                mult -= (mult > 2) ? 1 : mult;
            } else {
                throw new CharConversionException();
            }
        }
        return (11 - (chck % 11)) % 11;
    }
    
    /**
     * @param isbn A string representation of an ISBN-13 value.
     * @return True if isbn represents a legal ISBN-13 value, False otherwise.
     * @throws CharConversionException If the method is unable to generate a
     *          numeric value for any digit found in the ISBN-13 string.
     */
    public static boolean validateISBN13(String isbn) {
        boolean validPrefix = false;
        for (String prefix : LEGAL_ISBN13_PREFIX) {
            if (isbn.startsWith(prefix))
                validPrefix = true;
        }
        if (!validPrefix)
            return false;
        
        char checkChar = isbn.charAt(isbn.length() - 1);
        int checkSum;
        
        try {
            if (Character.isDigit(checkChar)) {
                checkSum = Character.getNumericValue(checkChar);
            } else {
                return false;
            }
            
            if (calculateISBN13CheckSum(isbn) == checkSum) {
                return true;
            }
        } catch (CharConversionException e) {}
        
        return false;
    }
    
    /**
     * @param isbn A string representation of an ISBN-13 value.
     * @return The checksum for the provided ISBN-13 as an integer ranging from
     *          0 to 9.
     * @throws CharConversionException If the method is unable to generate a
     *          numeric value for any digit found in the ISBN-13 string.
     */
    public static int calculateISBN13CheckSum(String isbn)
            throws CharConversionException {
        isbn = cleanISBN(isbn);
        if (isbn.length() > 12) {
            isbn = isbn.substring(0, 12);
        }
        int mult = 1;
        int chck = 0;
        for (char next : isbn.toCharArray()) {
            if (Character.isDigit(next)) {
                chck += mult * Character.getNumericValue(next);
                mult = (mult == 1) ? 3 : 1;
            } else {
                throw new CharConversionException();
            }
        }
        return (10 - (chck % 10)) % 10;
    }
}
